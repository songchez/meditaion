generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model Post {
  id             Int      @id @default(autoincrement())
  title          String
  content        String   @db.LongText
  authorEmail    String
  createdAt      DateTime @default(now())
  views          Int      @default(0)
  likes          Int      @default(0)
  mainImageUrl   String   @default("none")
  testaBook      String
  whereRead      String
  whereReadQuery String   @default("")
  published      Boolean  @default(false)
}

model GlobalCount {
  id           Int      @id @default(1)
  countVerse   Int      @default(0)
  countChapter Int      @default(0)
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  profileUrl    String    @default("none")
  countVerse    Int       @default(0) //몇 절 읽었니?
  countChapter  Int       @default(0) //몇 장 읽었니?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}